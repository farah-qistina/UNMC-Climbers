function main(workbook: ExcelScript.Workbook) {
    // Get the "Attendees" sheet
    let sheet = workbook.getWorksheet("Attendees");
    if (!sheet) {
        console.log("Attendees sheet not found.");
        return;
    }

    // Get the used range
    let usedRange = sheet.getUsedRange();
    if (!usedRange) {
        console.log("No data found in Attendees sheet.");
        return;
    }

    let values: (string | number | boolean)[][] = usedRange.getValues();

    // Function to properly format names
    function formatName(name: string): string {
        return name
            .toLowerCase()
            .split(" ")
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");
    }

    // Find the two tables
    let firstTableStart = -1;
    let secondTableStart = -1;

    for (let i = 0; i < values.length; i++) {
        if (values[i][0] === "Name") {
            if (firstTableStart === -1) {
                firstTableStart = i + 1; // First table starts below "Name" header
            } else {
                secondTableStart = i + 1; // Second table starts below the second "Name" header
                break;
            }
        }
    }

    if (firstTableStart === -1 || secondTableStart === -1) {
        console.log("Could not locate both tables.");
        return;
    }

    // Process names in both tables to be formatted correctly
    for (let i = firstTableStart; i < secondTableStart - 1; i++) {
        if (values[i][0] && typeof values[i][0] === "string") {
            values[i][0] = formatName(values[i][0]);
        }
    }
    for (let i = secondTableStart; i < values.length; i++) {
        if (values[i][0] && typeof values[i][0] === "string") {
            values[i][0] = formatName(values[i][0]);
        }
    }

    // Collect names where "Sent Out" is checked (TRUE)
    let sentOutList: string[] = [];
    const excludedHeaders = ["Committee", "Passengers", "Drivers", "Self-Transport"];

    for (let i = firstTableStart; i < secondTableStart - 1; i++) {
        let name = values[i][0] as string;
        let sentOut = values[i][2]; // Column index 2 is "Sent Out"

        if (sentOut === true && name && name.trim() !== "" && !excludedHeaders.includes(name.trim())) {
            sentOutList.push(name);
        }
    }


    // Process the second table and update climb count
    let climbMap: { [key: string]: number } = {}; // Store names with climb counts
    for (let i = secondTableStart; i < values.length; i++) {
        let name = values[i][0] as string;
        let climbCount = parseInt(values[i][1]?.toString() || "0");
        if (!isNaN(climbCount)) {
            climbMap[name] = climbCount;
        }
    }

    // Update climb counts based on sent out list
    sentOutList.forEach(name => {
        if (climbMap.hasOwnProperty(name)) {
            climbMap[name] += 1; // Increase existing count
        } else {
            climbMap[name] = 1; // New entry
        }
    });

    // Create the new second table with updated climb counts
    let newSecondTable: (string | number)[][] = [["Name", "No. of Climbs"]];

    // Convert climbMap into an array and sort by climbs in descending order
    Object.entries(climbMap)
        .sort((a, b) => b[1] - a[1]) // Sort by No. of Climbs (Descending)
        .forEach(([name, climbs]) => {
            newSecondTable.push([name, climbs]);
        });

    // Calculate the number of rows currently in the second table (excluding headers)
    let secondTableRowCount = values.length - secondTableStart;

    // If there are no names in the second table, set row count to 0
    if (secondTableRowCount <= 0) {
        secondTableRowCount = 0;
    }

    // Only clear if the second table is not empty
    if (secondTableRowCount > 0) {
        let secondTableRange = sheet.getRangeByIndexes(secondTableStart - 1, 0, secondTableRowCount, 2);
        secondTableRange.clear();
    }

    // If there are no names to update, stop execution here
    if (Object.keys(climbMap).length === 0) {
        console.log("No names to update in the second table.");
        return;
    }

    // Update the second table in the "Attendees" sheet with the new values
    let updatedTableRange = sheet.getRangeByIndexes(secondTableStart - 1, 0, newSecondTable.length, newSecondTable[0].length);
    updatedTableRange.setValues(newSecondTable);

    let headerRange = sheet.getRangeByIndexes(secondTableStart - 1, 0, 1, 2); // Select "Name" and "No. of Climbs"
    headerRange.getFormat().getFont().setBold(true);
    headerRange.getFormat().getFill().setColor("#D6DCE4");
}

function main(workbook: ExcelScript.Workbook) {
    // Attendees for first table
    let attendeesSheet = workbook.getWorksheet("Attendees");
    if (!attendeesSheet) {
        console.log("Attendees sheet not found.");
        return;
    }

    let climbMap: { [key: string]: number } = {};
    let sentOutList: string[] = [];

    climbMap = {};
    sentOutList = [];

    let usedRange = attendeesSheet.getUsedRange();
    if (!usedRange) {
        console.log("No data found in Attendees sheet.");
        return;
    }

    let values: (string | number | boolean)[][] = usedRange.getValues();

    // remove existing second table if present
    let existingSecondTableStart = -1;
    for (let i = 0; i < values.length; i++) {
        if (values[i][0] === "Name" && existingSecondTableStart === -1) { 
            existingSecondTableStart = i;
        } else if (values[i][0] === "Name") { 
            let lastRow = i + 1;
            while (lastRow < values.length && values[lastRow][0]) {
                lastRow++;
            }

            let clearRange = attendeesSheet.getRangeByIndexes(i, 0, lastRow - i, 2);
            clearRange.clear();

            values = values.slice(0, i);
            break;
        }
    }


    // Sheet1 for second table
    let secondSheet = workbook.getWorksheet("Sheet1");
    if (!secondSheet) {
        console.log("Sheet1 not found.");
        return;
    }
    let secondUsedRange = secondSheet.getUsedRange();
    if (!secondUsedRange) {
        console.log("No data found in Sheet1.");
        return;
    }
    let secondValues: (string | number | boolean)[][] = secondUsedRange.getValues();

    let secondTableHeaderRow = -1;
    for (let i = 0; i < secondValues.length; i++) {
        if (secondValues[i][0] === "Name") {
            secondTableHeaderRow = i;
            break;
        }
    }
    if (secondTableHeaderRow === -1) {
        console.log("Could not locate the second table (header 'Name') in Sheet1.");
        return;
    }

    for (let i = secondTableHeaderRow; i < secondValues.length; i++) {
        values.push(secondValues[i]);
    }

    // format name
    function formatName(name: string): string {
        return name
            .toLowerCase()
            .split(" ")
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(" ");
    }

    let firstTableStart = -1;
    let secondTableStart = -1;

    for (let i = 0; i < values.length; i++) {
        if (values[i][0] === "Name") {
            if (firstTableStart === -1) {
                firstTableStart = i + 1;
            } else {
                secondTableStart = i + 2;
                break;
            }
        }
    }

    if (firstTableStart === -1 || secondTableStart === -1) {
        console.log("Could not locate both tables.");
        return;
    }

    for (let i = firstTableStart; i < secondTableStart - 1; i++) {
        if (values[i][0] && typeof values[i][0] === "string") {
            values[i][0] = formatName(values[i][0] as string);
        }
    }
    for (let i = secondTableStart; i < values.length; i++) {
        if (values[i][0] && typeof values[i][0] === "string") {
            values[i][0] = formatName(values[i][0] as string);
        }
    }

    // names where Sent-Out is checked
    const excludedHeaders = ["Committee", "Passengers", "Drivers", "Self-Transport"];

    for (let i = firstTableStart; i < secondTableStart - 1; i++) {
        let name = values[i][0] as string;
        let sentOut = values[i][2];

        if (sentOut === true && name && name.trim() !== "" && !excludedHeaders.includes(name.trim())) {
            sentOutList.push(name);
        }
    }

    for (let i = secondTableStart; i < values.length; i++) {
        let name = values[i][0] as string;
        let climbCount = parseInt(values[i][1]?.toString() || "0");
        if (!isNaN(climbCount)) {
            climbMap[name] = climbCount;
        }
    }

    // update climb count
    sentOutList.forEach(name => {
        if (climbMap.hasOwnProperty(name)) {
            climbMap[name] += 1;
        } else {
            climbMap[name] = 1;
        }
    });

    // create new second table
    let newSecondTable: (string | number)[][] = [["Name", "No. of Climbs"]];

    // sort no. of climbs in descending order
    Object.entries(climbMap)
        .sort((a, b) => b[1] - a[1])
        .forEach(([name, climbs]) => {
            if (name && name.trim() !== "" && name !== "}" && name !== "0") {
                newSecondTable.push([name, climbs]);
            }
        });

    let secondTableRowCount = values.length - secondTableStart;

    if (secondTableRowCount <= 0) {
        secondTableRowCount = 0;
    }

    if (secondTableRowCount > 0) {
    let secondTableRange = attendeesSheet.getRangeByIndexes(
        secondTableStart - 1,
        0,
        secondTableRowCount + 1,
        2
    );
    secondTableRange.clear();
    }

    secondTableStart = secondTableStart - 1;


    if (Object.keys(climbMap).length === 0) {
        console.log("No names to update in the second table.");
        return;
    }

    attendeesSheet.getRangeByIndexes(secondTableStart, 0, newSecondTable.length, newSecondTable[0].length).clear();


    // update secondtable
    let updatedTableRange = attendeesSheet.getRangeByIndexes(
        secondTableStart,
        0,
        newSecondTable.length,
        newSecondTable[0].length
    );
    updatedTableRange.setValues(newSecondTable);

    let headerRange = attendeesSheet.getRangeByIndexes(
        secondTableStart,
        0,
        1,
        2
    );
    headerRange.getFormat().getFont().setBold(true);
    headerRange.getFormat().getFill().setColor("#D6DCE4");
}
